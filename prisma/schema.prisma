// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// doing up prisma x planetscale
datasource db {
  provider     = "mysql"             // we're using mysql
  url          = env("DATABASE_URL") // the url to the database, set in .env
  relationMode = "prisma"            // we're using prisma relations
}

// no need to define user models as thats handled by auth0, just need to define the profile model

model Profile {
  sub   String  @id                                                             // auth0 user id - will be unique and is the primary key, generated by auth0 making it relational to auth0
  name  String?                                                                 // auth0 user display name (not unique, their username is their email)
  email String?                                                                 // auth0 user email (unique)
  pfp   String? @default("https://users.cdn.mlinxapp.com/defaults/default.png") // auth0 user profile picture (default to mlinx logo)
  Link  Link[]                                                                  // links owned by the user
}

// now the tables for shortlinks

model Link {
  id          Int      @id @default(autoincrement())                      // autoincrementing identifier
  domain      String   @default("mlinx.co")                               // the domain of the shortlink (e.g. mlinx.co, bit.ly, pr.tn)  
  slug        String   @unique                                            // the shortlink slug (e.g. /catrescodes)
  destination String                                                      // the destination url (e.g. https://http.cat)
  owner       Profile? @relation(fields: [ownerId], references: [sub])    // the owner of the link, a profile identified by their auth0 sub (e.g. auth0|1234567890)
  ownerId     String?                                                     // relation field for owner
  createdAt   DateTime @default(now())                                    // when the link was created
  updatedAt   DateTime @updatedAt                                         // when the link was last updated

  @@index([ownerId]) // index the owner id for faster lookups
}

// thats it (for now !!!!!!)