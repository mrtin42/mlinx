// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// doing up prisma x planetscale
datasource db {
  provider     = "postgresql"        // finally migrating to postgresql I HATE PLANETSCALE
  url          = env("DATABASE_URL") // the url to the database, set in .env
  relationMode = "foreignKeys"       // use foreign keys for relations
}

// no need to define user models as thats handled by auth0, just need to define the profile model

model Profile {
  sub      String  @id                                                             // auth0 user id - will be unique and is the primary key, generated by auth0 making it relational to auth0
  name     String?                                                                 // auth0 user display name (not unique, their username is their email)
  email    String?                                                                 // auth0 user email (unique)
  pfp      String? @default("https://users.cdn.mlinxapp.com/defaults/default.png") // auth0 user profile picture (default to mlinx logo)
  projects Project[]                                                               // projects owned by the user
  domains  Domain[]                                                                // domains owned by the user
}

// now the tables for projects to sort links and domains into

model Project {
  slug        String   @id @unique                                                     // the project slug (e.g. catrescodes)
  name        String                                                                   // the project name
  description String?                                                                  // the project description
  logo        String   @default("https://users.cdn.mlinxapp.com/defaults/project.png") // the project logo (default to mlinx logo)
  domains     Domain[]                                                                 // the domains associated with the project
  links       Link[]                                                                   // the links associated with the project
  owner       Profile  @relation(fields: [ownerId], references: [sub])                 // the owner of the project, a profile identified by their auth0 sub (e.g. auth0|1234567890)
  ownerId     String                                                                   // relation field for owner
  createdAt   DateTime @default(now())                                                 // when the project was created
  updatedAt   DateTime @updatedAt                                                      // when the project was last updated


  @@index([ownerId]) // index the owner id for faster lookups
}

model Link {
  id          Int      @id @default(autoincrement())                      // autoincrementing identifier
  domain      String   @default("mlinx.co")                               // the domain of the shortlink (e.g. mlinx.co, bit.ly, pr.tn)  
  slug        String                                                      // the shortlink slug (e.g. /catrescodes)
  destination String                                                      // the destination url (e.g. https://http.cat)
  project     Project? @relation(fields: [projectId], references: [slug]) // the project the link is associated with
  projectId   String?                                                     // relation field for project
  ownerId     String?                                                     // relation field for owner
  createdAt   DateTime @default(now())                                    // when the link was created
  updatedAt   DateTime @updatedAt                                         // when the link was last updated

  @@unique(fields: [domain, slug], name: "unique_link") // unique constraint for domain and slug (e.g. mlinx.co/catrescodes and hazb.in/catrescodes can coexist but achtu.ng/catrescodes twice cannot)
  @@index([projectId])
}

// CUSTOM DOMAINS CUSTOM DOMAINS
model Domain {
  id          Int      @id @default(autoincrement())                      // autoincrementing identifier
  domain      String   @unique                                            // the user's custom domain (e.g. mvrt.in, hazb.in, mbfr.me)
  project     Project  @relation(fields: [projectId], references: [slug]) // the project the domain is associated with
  projectId   String                                                      // relation field for project
  owner       Profile  @relation(fields: [ownerId], references: [sub])    // the owner of the domain, a profile identified by their auth0 sub (e.g. auth0|1234567890)
  ownerId     String                                                      // relation field for owner
  createdAt   DateTime @default(now())                                    // when the domain was added
  updatedAt   DateTime @updatedAt                                         // when the domain was last updated

  @@index([projectId])
}

// good to add a table every now and then ! feels like ACCOMPLISHMENT TO ME?!?!!?!?